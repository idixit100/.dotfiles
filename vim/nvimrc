" https://medium.com/geekculture/neovim-configuration-for-beginners-b2116dbbde84
" https://catonmat.net/vim-plugins-nerdtree-vim
" https://stackoverflow.com/questions/3776117/what-is-the-difference-between-the-remap-noremap-nnoremap-and-vnoremap-mapping
" https://github.com/jdhao/nvim-config 
" read up on plug vs. packer -- faster + more feature rich + lua. 
" configuration through lua
" code navigation (treesitter and/or solargraph), file navigation (nerdtree), 
" global file search (telescope) and autocomplete
" LSP -- the thing that provides useful functionality such as code
" nagivation. But it's slower because it has to send over the entire file
" CoC - This is meant to be a runtime for vscode plugins for VIM, but is
" just often used for LSP type features. Might be a good complement but
" increase the size / speed of things? Might as well use CoC because it has
" typescript support and prettier
" Treesitter - provides more local type support. Builds out a syntax
" tree that provides a common interface for different languages. Uses LR and
" GLR parsing which basically is more flexible than regex parsing and can
" also fork the tree based on different interpretations. The
" time complexity is based on the number of edits rather than the size of
" the entire tree. Really nice and speedy and good for syntax highlighting
" among other things [talk by Max
" Brunsfield](https://www.youtube.com/watch?v=Jes3bD6P0To&t=38s)
" docker support with [lazy docker](https://catonmat.net/vim-plugins-nerdtree-vim)
" Hop https://www.youtube.com/feed/history and https://www.youtube.com/watch?v=U420QymHjlA&t=243s

set runtimepath^=~/.vim runtimepath+=~/.vim/after
let &packpath = &runtimepath
source ~/.dotfiles/vim/vimrc

call plug#begin("~/.dotfiles/vim/plugged")
  Plug 'dracula/vim'
  Plug 'ryanoasis/vim-devicons'

  Plug 'SirVer/ultisnips'
  Plug 'honza/vim-snippets' " :help provider-python

  Plug 'scrooloose/nerdtree'
  Plug 'preservim/nerdcommenter'

  Plug 'mhinz/vim-startify'
  Plug 'neovim/nvim-lspconfig'
  Plug 'neoclide/coc.nvim', {'branch': 'release'}
  Plug 'nvim-telescope/telescope.nvim'
    Plug 'nvim-lua/popup.nvim'
    Plug 'nvim-lua/plenary.nvim'

  " Misc
  Plug 'folke/which-key.nvim'
  Plug 'jdhao/better-escape.vim'
  Plug 'phaazon/hop.nvim'

  "Git
  Plug 'tpope/vim-fugitive'

  " RoR specific ones 
  Plug 'thoughtbot/vim-rspec'
  Plug 'tpope/vim-rails'
  Plug 'tpope/vim-endwise'
call plug#end()

" color schemes
if (has("termguicolors"))
 set termguicolors
 endif
 syntax enable

" colorscheme evening
colorscheme dracula " open new split panes to right and below
set splitright
set splitbelow

let g:coc_global_extensions = ['coc-solargraph']
lua << EOF
local nvim_lsp = require('lspconfig')

-- Use an on_attach function to only map the following keys
-- after the language server attaches to the current buffer
local on_attach = function(client, bufnr)
  local function buf_set_keymap(...) vim.api.nvim_buf_set_keymap(bufnr, ...) end
  local function buf_set_option(...) vim.api.nvim_buf_set_option(bufnr, ...) end

  --Enable completion triggered by <c-x><c-o>
  buf_set_option('omnifunc', 'v:lua.vim.lsp.omnifunc')

  -- Mappings.
  local opts = { noremap=true, silent=true }

  -- See `:help vim.lsp.*` for documentation on any of the below functions
  buf_set_keymap('n', 'gD', '<Cmd>lua vim.lsp.buf.declaration()<CR>', opts)
  buf_set_keymap('n', 'gd', '<Cmd>lua vim.lsp.buf.definition()<CR>', opts)
  buf_set_keymap('n', 'K', '<Cmd>lua vim.lsp.buf.hover()<CR>', opts)
  buf_set_keymap('n', 'gi', '<cmd>lua vim.lsp.buf.implementation()<CR>', opts)
  buf_set_keymap('n', '<C-k>', '<cmd>lua vim.lsp.buf.signature_help()<CR>', opts)
  buf_set_keymap('n', '<space>wa', '<cmd>lua vim.lsp.buf.add_workspace_folder()<CR>', opts)
  buf_set_keymap('n', '<space>wr', '<cmd>lua vim.lsp.buf.remove_workspace_folder()<CR>', opts)
  buf_set_keymap('n', '<space>wl', '<cmd>lua print(vim.inspect(vim.lsp.buf.list_workspace_folders()))<CR>', opts)
  buf_set_keymap('n', '<space>D', '<cmd>lua vim.lsp.buf.type_definition()<CR>', opts)
  buf_set_keymap('n', '<space>rn', '<cmd>lua vim.lsp.buf.rename()<CR>', opts)
  buf_set_keymap('n', '<space>ca', '<cmd>lua vim.lsp.buf.code_action()<CR>', opts)
  buf_set_keymap('n', 'gr', '<cmd>lua vim.lsp.buf.references()<CR>', opts)
  buf_set_keymap('n', '<space>e', '<cmd>lua vim.lsp.diagnostic.show_line_diagnostics()<CR>', opts)
  buf_set_keymap('n', '[d', '<cmd>lua vim.lsp.diagnostic.goto_prev()<CR>', opts)
  buf_set_keymap('n', ']d', '<cmd>lua vim.lsp.diagnostic.goto_next()<CR>', opts)
  buf_set_keymap('n', '<space>q', '<cmd>lua vim.lsp.diagnostic.set_loclist()<CR>', opts)
  buf_set_keymap("n", "<space>f", "<cmd>lua vim.lsp.buf.formatting()<CR>", opts)

end

-- Use a loop to conveniently call 'setup' on multiple servers and
-- map buffer local keybindings when the language server attaches
local servers = { "solargraph" }
for _, lsp in ipairs(servers) do
  nvim_lsp[lsp].setup {
    on_attach = on_attach,
    flags = {
      debounce_text_changes = 150,
    }
}
end
EOF

lua << EOF

vim.o.completeopt = "menuone,noselect"
  require("which-key").setup {
    -- your configuration comes here
    -- or leave it empty to use the default settings
    -- refer to the configuration section below
  }
EOF

lua << EOF
local hop = require('hop')
hop.setup()
hop.setup {
  multi_windows = true,
}
local directions = require('hop.hint').HintDirection
EOF

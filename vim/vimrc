" https://www.shortcutfoo.com/blog/top-50-vim-configuration-options/
" https://www.freecodecamp.org/news/vimrc-configuration-guide-customize-your-vim-editor/

" viminfo line memory for copy and pasting. See
" https://stackoverflow.com/questions/3676855/vim-limited-line-memory
set viminfo='100,<1000,s100,h


" Disable compatibility with vi which can cause unexpected issues.
set nocompatible

" Enable type file detection. Vim will be able to try to detect the type of file in use.
filetype on
filetype plugin on
set clipboard=unnamedplus    " using system clipboard
filetype plugin on
set cc=80                  " set an 80 column border for good coding style
set cursorline              " highlight current cursorline
set ttyfast                 " Speed up scrolling in Vim

" indentation  
filetype indent on
set autoindent
set expandtab
set shiftround
set shiftwidth=2
set smarttab
set tabstop=2
set softtabstop=2           " see multiple spaces as tabstops so <BS> does the right thing

" search
set hlsearch
set ignorecase
set incsearch
set smartcase

" text rendering
set encoding=utf-8
set linebreak
set sidescrolloff=5
syntax on
set wrap

" user interface
set laststatus=2
set ruler
set wildmenu "display command line's tab complete options as a menu
set wildmode=list:longest
set number
set relativenumber
set mouse=a
set background=dark

" misc
set backspace=indent,eol,start
set backupdir=~/.cache/vim
set dir=~/.cache/vim
set history=1000
set noswapfile
set shell=/bin/zsh
" set spell

" mappings
let mapleader = '\'
nnoremap <leader>h :noh<CR>
nnoremap <leader>1 :NERDTreeToggle<CR>
nnoremap <leader><leader> :HopWord<CR>

inoremap <expr> <cr> coc#pum#visible() ? coc#pum#confirm() : "\<CR>"

" use <tab> for trigger completion and navigate to the next complete item
function! CheckBackspace() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use tab for trigger completion with characters ahead and navigate.
inoremap <silent><expr> <TAB>
  \ pumvisible() ? "\<C-n>" :
  \ <SID>check_back_space() ? "\<TAB>" :
  \ coc#refresh()

inoremap <expr><S-TAB> pumvisible() ? "<C-p>" : "<C-h>"

let g:coc_snippet_next = '<tab>'
let g:coc_snippet_prev = '<s-tab>'

" Determite if in completion, snippet or text mode and set tab accordingly
function! Tab_Or_Complete()
  if col('.')>1 && strpart( getline('.'), col('.')-2, 3 ) =~ '^\w'
    return "\<C-N>"
  else
    return "\<Tab>"
  endif
endfunction

inoremap <Tab> <C-R>=Tab_Or_Complete()<CR>
